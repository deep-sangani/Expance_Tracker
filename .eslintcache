[{"/media/deep/7DAD6BFF33575589/expense-tracker/src/index.js":"1","/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/Header.js":"2","/media/deep/7DAD6BFF33575589/expense-tracker/src/App.js":"3","/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/IncomeExpenses.js":"4","/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/TransactionList.js":"5","/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/AddTransaction.js":"6","/media/deep/7DAD6BFF33575589/expense-tracker/src/context/GlobelContext.js":"7","/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/Tranaction.js":"8","/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/Balance.js":"9"},{"size":178,"mtime":1606642510701,"results":"10","hashOfConfig":"11"},{"size":150,"mtime":1606642660240,"results":"12","hashOfConfig":"11"},{"size":580,"mtime":1606746847081,"results":"13","hashOfConfig":"11"},{"size":844,"mtime":1606747966011,"results":"14","hashOfConfig":"11"},{"size":547,"mtime":1606737464251,"results":"15","hashOfConfig":"11"},{"size":1679,"mtime":1606742159928,"results":"16","hashOfConfig":"11"},{"size":1704,"mtime":1606751591776,"results":"17","hashOfConfig":"11"},{"size":601,"mtime":1606753325532,"results":"18","hashOfConfig":"11"},{"size":462,"mtime":1606751537298,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1chkght",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"/media/deep/7DAD6BFF33575589/expense-tracker/src/index.js",[],["41","42"],"/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/Header.js",[],"/media/deep/7DAD6BFF33575589/expense-tracker/src/App.js",[],"/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/IncomeExpenses.js",[],"/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/TransactionList.js",[],"/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/AddTransaction.js",[],"/media/deep/7DAD6BFF33575589/expense-tracker/src/context/GlobelContext.js",["43"],"import { createContext, useState,useEffect } from \"react\"\nimport TransactionList from \"../componants/TransactionList\";\n\n\n\n\n\nconst GlobelContext = createContext({});\n\n\nexport const GlobelProvider = ({ children }) => {\n    \n    \n    \n     \n    \n\n\n    const [initState, setState] = useState({\n        Transactions: [\n            { id: 1, text: 'Flower', amount: -20 },\n            { id: 2, text: 'Salary', amount: 300 },\n            { id: 3, text: 'Book', amount: -10 },\n            { id: 4, text: 'Camera', amount: 150 }\n        ],\n\n    })\n   \n    useEffect(() => {\n        const data = JSON.parse(localStorage.getItem(\"transactions\"))\n     setState(data!==null?data:{Transactions:[{ id: 1, text: \"demo\", amount: 0},]})\n    console.log(JSON.parse(localStorage.getItem(\"transactions\")))\n     }, [])\n\n\n\n    const deleteTransaction = (key) => {\n       if(initState.Transactions!==null){\n        var arr = initState.Transactions.filter(transaction => transaction.id !== key)\n        \n        setState({ Transactions: arr })\n        console.log(initState.Transactions)\n        localStorage.setItem(\"transactions\",JSON.stringify({Transactions:arr}))\n       }\n      \n\n\n    }\n\n    const insertTransaction = (transaction)=>{\n        var arr = initState.Transactions;\n        arr.push(transaction)\n        console.log(arr)\n        setState({Transactions:arr})\n        localStorage.setItem(\"transactions\",JSON.stringify(initState))\n        \n       \n        \n        \n    }\n \n\n    return (\n        <GlobelContext.Provider\n            value={{ Transactions: initState.Transactions, deleteTransaction,insertTransaction }} >\n            {children}\n\n        </GlobelContext.Provider>\n    )\n}\n\nexport default GlobelContext;","/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/Tranaction.js",[],"/media/deep/7DAD6BFF33575589/expense-tracker/src/componants/Balance.js",["44","45"],"import React,{useContext} from 'react'\nimport GlobelContext from \"../context/GlobelContext\"\nexport default function Balance() {\n    const {Transactions} = useContext(GlobelContext)\n     \n    const amounts = Transactions.map(transaction => transaction.amount);\n\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n    return (\n        <>\n    <h4>Your Balance</h4>\n    <h1 id=\"balance\">â‚¹{total==NaN?0.00:total}</h1>\n        </>\n    )\n}\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":2,"column":8,"nodeType":"52","messageId":"53","endLine":2,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":12,"column":24,"nodeType":"56","messageId":"57","endLine":12,"endColumn":34},{"ruleId":"58","severity":1,"message":"59","line":12,"column":29,"nodeType":"56","messageId":"60","endLine":12,"endColumn":31},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'TransactionList' is defined but never used.","Identifier","unusedVar","use-isnan","Use the isNaN function to compare with NaN.","BinaryExpression","comparisonWithNaN","eqeqeq","Expected '===' and instead saw '=='.","unexpected","no-global-assign","no-unsafe-negation"]